---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianghaiqiang.
--- DateTime: 2019/10/21 16:38
---
local ext       = require "lion.extension"

local _M = {
    _VERSION = "1.0.0",
}

---实例化一个新实例
---
function _M:new(query)
    query = query or {}
    setmetatable(query, self )
    self.__index = self
    self:init()
    return query
end

---
---
function _M:init()
    self._db     = nil
    self._select = "*"
    self._table  = nil
    self._where  = nil
    self._group  = nil
    self._order  = nil
    self._offset = 0
    self._limit  = 1000
    return self
end

---
---@param field string
---
function _M.formatField(field)
    return '`'..field..'`'
end

---
---@param db resty.mysql
---
function _M:db(db)
    self._db = db
    return self
end

---
---@param table string
---
function _M:from(table)
    self._table = table
    return self
end

---
---@param fields table|string
---
function _M:select(fields)
    self._select = fields
    return self
end

---
---@param where table|string
---
function _M:where(where)
    self._where = where
    return self
end

---
---@param group table|string
---
function _M:group(group)
    self._group = group
    return self
end

---
---@param order table|string
---
function _M:order(order)
    self._order = order
    return self
end

---
---@param offset number
---
function _M:offset(offset)
    self._offset = offset
    return self
end

---
---@param limit number
---
function _M:limit(limit)
    self._limit = limit
    return self
end

---
---@param str string
---
function _M.quote(str)
    return ngx.quote_sql_str(str)
end

---
---@param where table|string
---
function _M.analyWhere(where)
    if ext.empty(where) then
        return " "
    end

    if type(where) == "string" then
        return " WHERE "..where
    end

    local finallyWhere = {}
    local operator     = "="
    for field,value in pairs(where) do
        operator = "="
        local index = string.find(field," ")
        if index > 1 then
            operator = string.sub(field, index+1)
            field = string.sub(field,1, index -1)
        end

        if type(value) == "table" then
            if operator == "=" then
                operator = "IN"
            end
        end

        field = _M.formatField(field)
        operator = string.upper(operator)

        local subWhere = ""
        if operator == "IN" then
            local inValues = ""
            for _,val in pairs(value) do
                inValues = inValues.._M.quote(val)..","
            end
            subWhere = field.." IN("..string.sub(inValues,1,-2)..")";
        elseif operator == "BETWEEN" then
            subWhere = field.." BETWEEN ".._M.quote(value[1]).." AND ".._M.quote(value[2])
        elseif operator == "LIKE" then
            subWhere = field.. " LIKE ".._M.quote(value)
        else
            subWhere = field.. " "..operator.._M.quote(value)
        end
        table.insert(finallyWhere,"("..subWhere..")")
    end

    return " WHERE "..table.concat(finallyWhere, " AND ")
end

--region resty.mysql还不支持pdo style
---
---@return table
---
--[[function _M:getParams()
    return self._params
end]]

---
---@param where  table|string
---@param params table
---
--[[function _M.analyWhereForPdo(where, params)
    params = params or {}
    if ext.empty(where) then
        return " ", params
    end

    if type(where) == "string" then
        return " WHERE "..where, params
    end

    local finallyWhere = {}
    local operator     = "="
    for field,value in pairs(where) do
        operator = "="
        local index = string.find(field," ")
        if index > 1 then
            operator = string.sub(field, index+1)
            field = string.sub(field,1, index -1)
        end

        if type(value) == "table" then
            if operator == "=" then
                operator = "IN"
            end
            for _,val in pairs(value) do
                table.insert(params, val)
            end
        else
            table.insert(params, value)
        end

        field = _M.formatField(field)
        operator = string.upper(operator)

        local subWhere = ""
        if operator == "IN" then
            subWhere = field.." IN("..ext.repeatAndRTrim("?,",#value)..")";
        elseif operator == "BETWEEN" then
            subWhere = field.." BETWEEN ? AND ? "
        elseif operator == "LIKE" then
            subWhere = field.. " LIKE ?"
        else
            subWhere = field.. " "..operator.."?"
        end
        table.insert(finallyWhere,"("..subWhere..")")
    end

    return " WHERE "..table.concat(finallyWhere, " AND "), params
end]]
--endregion

---生成sql和params
---@return string
---
function _M:sql()
    local fields = ""
    local group  = ""
    local order  = ""

    if ext.empty(self._select) then
        fields = "*"
    elseif ext.isTable(self._select) then
        for _,field in pairs(self._select) do
            fields = fields.._M.formatField(field)..","
        end
        fields = string.sub(fields,1,-2)
    else
        fields = self._select
    end

    if not ext.empty(self._group) then
        if ext.isTable(self._group) then
            for _,field in pairs(self._group) do
                group = group..field..","
            end
            group = " GROUP BY "..string.sub(group,1,-2)
        else
            group = " GROUP BY "..self._group
        end
    end

    if not ext.empty(self._order) then
        if ext.isTable(self._order) then
            for _, field in pairs(self._order) do
                order = order..field..","
            end
            order = " ORDER BY "..string.sub(group,1,-2)
        else
            order = " ORDER BY "..self._order
        end
    end

    return "SELECT "..fields.." FROM ".._M.formatField(self._table).._M.analyWhere(self._where)..group..order.." LIMIT "..self._offset..","..self._limit
end

function _M:all(db)
    db = db or self._db
    local sql = self:sql()
    local res, err, errcode, sqlstate = db:query(sql)
    if not res then
    ngx.log(ngx.ERR, "bad result #1: ", err, ": ", errcode, ": ", sqlstate, ".")
    return ngx.exit(500)
    end
end

function _M:one(db)
    db = db or self._db
    local sql = self:limit(1):sql()
    local result = db.queryAll(sql)
end

return _M